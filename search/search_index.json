{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the  Xenia Emulator Logo image/svg+xml Xenia Emulator Logo 28-05-2019 SVG Remake of Xenia Logo by Kwasior/@ThisKwasior Ainex Wiki, the primary source of documentation for Ainex, an experimental Xbox 360 emulator.</p> <p>Game Compatibility</p> <p>Tab Navigation</p> <p>Use tabs in header for navigation</p> <p>Open Source</p> <p>This site is Open Source and licensed under LICENSE. The source (as Markdown) is hosted on GitHub. Please see README.md for details on hosting the docs locally and contributing.</p> <p>Helpful Links</p> <ul> <li>Quickstart Guide (Start Here!)</li> <li>Frequently Asked Questions</li> <li>Developer Guide</li> <li>Contribute to the Wiki</li> </ul>"},{"location":"development/","title":"Contribute to Ainex","text":"<p>So, you want to contribute to Ainex's development? Here are the steps you'll need to take to get started:</p> <ul> <li>Have a computer capable of running Ainex, and install the required system components:<ul> <li>See System Requirements</li> </ul> </li> <li>Learn the language<ul> <li>An often overlooked aspect to newcomers is having an understanding of the language the project is written in.</li> <li>Ainex uses C++ 17 for development.   If you don't know this language, you may learn the basics on YouTube,   but it may take a while to get a full grasp of it.</li> <li>In addition, to submit your contributions, you'll need to know how to use Git.</li> <li>Here is a crash course on Git to help you out.</li> </ul> </li> <li>Learn to build Ainex from source   This step should give you all you need to start developing Ainex with Visual Studio on Windows or Codelite on Linux.</li> <li>Follow the style guide   Run <code>xb format</code> before creating a pull request.</li> </ul> <p>When you're ready, fork Ainex on GitHub, and push your changes. Then create a pull request on GitHub.</p> <ol> <li> <p>Click the <code>New Pull Request</code> button at the top right of the page: </p> </li> <li> <p>Click <code>Compare Across Forks</code> to compare with your fork: </p> </li> <li> <p>Select your own fork from the list: </p> </li> <li> <p>Review your selection. Make sure you have selected the correct branch.</p> </li> <li> <p>Click <code>Create Pull Request</code> to confirm your selection: </p> </li> <li> <p>Write a title and description for your pull request. When you're done, press <code>Create Pull Request</code>. </p> </li> </ol>"},{"location":"development/building/","title":"Building","text":"<p>You must have a 64-bit machine for building and running the project. Always run your system updater before building and make sure you have the latest drivers.</p>"},{"location":"development/building/#setup","title":"Setup","text":""},{"location":"development/building/#windows","title":"Windows","text":"<ul> <li>Windows 7 or later</li> <li>Visual Studio 2017, 2019 or 2022</li> <li>Python 3.6+</li> <li>Ensure Python is in PATH.</li> <li>Windows 10 SDK version 10.0.19041.0 (for Visual Studio 2019+, this or any newer version)</li> </ul> <pre><code>git clone https://github.com/ainex-project/ainex.git\ncd xenia\nxb setup\n\n# Build on command line (add --config=release for release):\nxb build\n\n\n# Pull latest changes, rebase, update submodules, and run premake:\nxb pull\n\n# Run premake and open Visual Studio (run the 'xenia-app' project):\nxb devenv\n\n# Run premake to update the sln/vcproj's:\nxb premake\n\n# Format code to the style guide:\nxb format\n</code></pre>"},{"location":"development/building/#debugging","title":"Debugging","text":"<p>VS behaves oddly with the debug paths. Open the 'xenia-app' project properties and set the 'Command' to <code>$(SolutionDir)$(TargetPath)</code> and the 'Working Directory' to <code>$(SolutionDir)..\\..</code>. You can specify flags and the file to run in the 'Command Arguments' field (or use <code>--flagfile=flags.txt</code>).</p> <p>By default logs are written to a file with the name of the executable. You can override this with <code>--log_file=log.txt</code>.</p> <p>If running under Visual Studio and you want to look at the JIT'ed code (available around 0xA0000000) you should pass <code>--emit_source_annotations</code> to get helpful spacers/movs in the disassembly.</p>"},{"location":"development/building/#linux","title":"Linux","text":"<p>Linux support is extremely experimental and presently incomplete.</p> <p>The build script uses LLVM/Clang 9. GCC while it should work in theory, is not easily interchangeable right now.</p> <ul> <li>Normal building via <code>xb build</code> uses Make.</li> <li>CodeLite is supported. <code>xb devenv</code> will generate a workspace and attempt to open it. Your distribution's version may be out of date so check their website.</li> <li>Experimental CMake generation is available to facilitate use of other IDEs such as CLion. If <code>clion</code> is available inside <code>$PATH</code>, <code>xb devenv</code> will start it. Otherwise <code>build/CMakeLists.txt</code> needs to be generated by invoking <code>xb premake --devenv=cmake</code> manually.</li> </ul> <p>Clang-9 or newer should be available from system repositories on all up to date distributions. You will also need some development libraries. To get them on an Ubuntu system:</p> <pre><code>sudo apt-get install libgtk-3-dev libpthread-stubs0-dev liblz4-dev libx11-dev libx11-xcb-dev libvulkan-dev libsdl2-dev libiberty-dev libunwind-dev libc++-dev libc++abi-dev\n</code></pre> <p>In addition, you will need up to date Vulkan libraries and drivers for your hardware, which most distributions have in their standard repositories nowadays.</p>"},{"location":"development/building/#running","title":"Running","text":"<p>To make life easier you can set the program startup arguments in your IDE to something like <code>--log_file=stdout /path/to/Default.xex</code> to log to console rather than a file and start up the emulator right away.</p>"},{"location":"development/for_developers/","title":"Does Ainex run on Linux or macOS?","text":"<p>The project is designed to support non-Windows platforms but until it's running games it's not worth the maintenance burden. MacOS will likely remain unsupported until Apple supports Vulkan.</p> <p>There's only a few major pieces that need cleanup before a Linux port can proceed in earnest, listed with the cross-platform tag. Most of the code compiles with the latest Clang, and very few files have dependencies on Windows APIs (all of that is isolated to <code>_win.cc</code> files). Though the codebase is ready for the port, it's not a trivial task and anyone seeking to port it will need a deep understanding of Linux, X11, Vulkan, and Win32 (to ensure matching semantics).</p>"},{"location":"development/for_developers/#you-should-port-it-to-linux-then-tons-of-developers-will-contribute","title":"You should port it to Linux, then tons of developers will contribute!","text":"<p>No, they won't, and that's not how things work. (I'm seriously told this once a week...)</p> <p>Think of it this way: the most important kind of contributor in this phase of the project is one who is capable of performing the porting work. If someone has this capability and feels so strongly about Linux support then they would be contributing to the porting efforts already. But otherwise they are nothing more than hypothetical members of our collective dreams.</p>"},{"location":"development/for_developers/#why-did-you-do-x-why-not-just-use-y-you-should-use-y-nih-nih-nih","title":"Why did you do X? Why not just use Y? You should use Y. NIH NIH NIH!","text":"<p>Trust that I either have a good reason for what I did or have absolutely no reason for what I did. This is a large project that I've been working on for almost 5 years and in that time new compilers and language specs have been released, libraries have been created and died, and I've learned a lot. Constructive contributions and improvements are welcome.</p>"},{"location":"development/for_developers/#have-you-heard-of-llvmasmjitjitasmluajitetc","title":"Have you heard of LLVM/asmjit/jitasm/luajit/etc?","text":"<p>Yes, I have heard of them. In fact, I spent a long time trying them out: LLVM, libjit, asmjit. I did not find them acceptable for use in this project for various reasons. If for some reason you feel strongly otherwise, feel free to either contribute a new CPU backend.</p>"},{"location":"development/for_developers/#some-argument-over-an-unimportant-technical-choice","title":"(some argument over an unimportant technical choice)","text":"<p>In general: I don't care. That means I either really don't care and something is they way it is because that was convenient or that I don't care because it's not material to the goal of the project. There are a million important things that need to be done to get games running and going back and forth about unimportant orthogonal issues does not help. If you really do have a better way of doing something and can show it, contributions are welcome.</p> <p>Here's a short list of common ones:</p> <ul> <li>'Why this xb stuff?' -- I like it, it helps me. If you want to manually execute commands have fun, nothing is stopping you.</li> <li>'Why not just take the code from project X?' -- the point of this project is to build something different than previous emulator projects and learn while doing it. The easy way is almost never the best way and most certainly isn't as fun.</li> <li>'Why not CMake?' -- I don't like CMake as it generates ugly Visual Studio projects. Premake does what I want (mostly) how I want it to.</li> </ul>"},{"location":"development/for_developers/#hey-im-going-to-go-modify-every-file-in-the-project-ok","title":"Hey I'm going to go modify every file in the project, ok?","text":"<p>We welcome contributions, but please try to understand that we cannot accept changes that radically alter the structure or content of the code, especially if they are aesthetic and even more so if they are from someone who has not contributed before. If a pull request of this nature is denied that doesn't necessarily mean your help is not wanted, just that it may need to be more carefully applied.</p>"},{"location":"development/instruction_tracing/","title":"Instruction Tracing","text":"<p>In x64_tracers.cc:</p> <p>Enable tracing: <pre><code>#define ITRACE 1  &lt;--- for only ppc instructions\n#define DTRACE 1  &lt;--- add HIR data\n</code></pre></p> <p>If tracing data, run with the following flags: <pre><code>--store_all_context_values\n</code></pre></p> <p>By default, tracing will start at the beginning and only for the specified thread.</p> <p>Change traced thread by thread creation ID: <pre><code>#define TARGET_THREAD 4\n</code></pre></p> <p>To only trace at a certain point, change default trace flag to false: <pre><code>bool trace_enabled = true;\n</code></pre> Add a breakpoint: <pre><code>--break_on_instruction=0x821009A4\n</code></pre> On break, add the following to the Watch window and set it to true: <pre><code>xe::cpu::backend::x64::trace_enabled\n</code></pre> Continue, and watch stuff appear in the log.</p>"},{"location":"development/style_guide/","title":"C++ Style Guide","text":"<p>The style guide can be summed up as 'clang-format with the Google style set'. In addition, the Google Style Guide is followed and cpplint is the source of truth. When in doubt, defer to what code in the project already does.</p> <p>Base rules:</p> <ul> <li>80 column line length max</li> <li>LF (Unix-style) line endings</li> <li>2-space soft tabs, no TABs!</li> <li>Google Style Guide for naming/casing/etc</li> <li>Sort includes according to the style guide rules</li> <li>Comments are properly punctuated (that means capitalization and periods, etc)</li> <li>TODO's must be attributed like <code>// TODO(yourgithubname): foo.</code></li> </ul> <p>Code that really breaks from the formatting rules will not be accepted, as then no one else can use clang-format on the code without also touching all your lines.</p>"},{"location":"development/style_guide/#why","title":"Why?","text":"<p>To quote the Google Style Guide:</p> <pre><code>One way in which we keep the code base manageable is by enforcing consistency.\nIt is very important that any programmer be able to look at another's code and\nquickly understand it. Maintaining a uniform style and following conventions\nmeans that we can more easily use \"pattern-matching\" to infer what various\nsymbols are and what invariants are true about them. Creating common, required\nidioms and patterns makes code much easier to understand. In some cases there\nmight be good arguments for changing certain style rules, but we nonetheless\nkeep things as they are in order to preserve consistency.\n</code></pre>"},{"location":"development/style_guide/#buildbot-verification","title":"Buildbot Verification","text":"<p>The buildbot runs <code>xb lint --all</code> on the master branch, and will run <code>xb lint --origin</code> on pull requests. Run <code>xb format</code> before you commit each local change so that you are consistently clean, otherwise you may have to rebase. If you forget, run <code>xb format --origin</code> and rebase your changes (so you don't end up with 5 changes and then a 6th 'whoops' one \u2014 that's nasty).</p> <p>The buildbot is running LLVM 3.8.0. If you are noticing style differences between your local lint/format and the buildbot, ensure you are running that version.</p>"},{"location":"development/style_guide/#tools","title":"Tools","text":""},{"location":"development/style_guide/#clang-format","title":"clang-format","text":"<p>clang-format with the Google style is used to format all files. I recommend installing/wiring it up to your editor of choice so that you don't even have to think about tabs and wrapping and such.</p>"},{"location":"development/style_guide/#command-line","title":"Command Line","text":"<p>To use the <code>xb format</code> auto-formatter, you need to have a <code>clang-format</code> on your PATH. If you're on Windows you can do this by installing an LLVM binary package from the LLVM downloads page. If you install it to the default location the <code>xb format</code> command will find it automatically even if you don't choose to put all of LLVM onto your PATH.</p>"},{"location":"development/style_guide/#visual-studio","title":"Visual Studio","text":"<p>Grab the official experimental Visual Studio plugin. To switch to the Google style go Tools -&gt; Options -&gt; LLVM/Clang -&gt; ClangFormat and set Style to Google. Then use ctrl-r/ctrl-f to trigger the formatting. Unfortunately it only does the cursor by default, so you'll have to select the whole doc and invoke it to get it all done.</p> <p>If you have a better option, let me know!</p>"},{"location":"development/style_guide/#xcode","title":"Xcode","text":"<p>Install Alcatraz to get the ClangFormat package. Set it to use the Google style and format on save. Never think about tabs or linefeeds or whatever again.</p>"},{"location":"development/style_guide/#cpplint","title":"cpplint","text":"<p>TODO(benvanik): write a cool script to do this/editor plugins. In the future, the linter will run as a git commit hook and on travis.</p>"},{"location":"development/style_guide/#android-style-guide","title":"Android Style Guide","text":"<p>Android Java and Groovy code and XML files currently don't have automatic format verification during builds, however, stick to the AOSP Java Code Style Rules, which contain guidelines not only for code formatting, but for the usage of language features as well.</p> <p>The formatting rules used in Ainex match the default Android Studio settings. They diverge from the C++ code style rules of Ainex in many areas, such as indentation width and the maximum line length, however, the goal for Android formatting in Ainex is to ensure quick development environment setup.</p> <p>In Java code, limit the length of each line to 100 characters. If an assignment doesn't fit in the limit, move the right-hand side of it to a separate line with 8-space indentation. Similarly, if the argument list of a method declaration or a call is too long, start the entire argument list on a new line, also indented with 8 spaces \u2014 this is one of the differences from the C++ code style in Ainex, where arguments may be aligned with the opening bracket. In general, follow the rectangle rule so expressions in the code constitute a hierarchy of their bounding rectangles, ensuring that with 4-space indentation for block contents and 8-space indentation for sub-expressions.</p> <p>In XML files, if the width of the line with an element exceeds 100 characters, or in most cases when there are multiple attributes, each attribute should be placed on a separate line with 4-space indentation, with the exception of the first <code>xmlns</code>, which should stay on the same line as the element name.</p> <p>In Groovy, use 4-space indentation for blocks and 8-space indentation for splitting arguments into multiple lines. String literals should be written in single quotes unless string interpolation is used.</p> <p>You can use the Code -&gt; Reformat Code and Code -&gt; Reformat File options in Android Studio to apply coarse formatting rules for different kinds of files supported by Android Studio, such as Java, XML and Groovy. While clang-format is very strict and generates code with the single allowed way of formatting, Android Studio, however, preserves many style choices in the original code, so it's recommended to approximate the final style manually instead of relying entirely on automatic formatting. Also use Code -&gt; Rearrange Code to maintain a consistent structure of Java class declarations.</p>"},{"location":"development/console-docs/","title":"Xbox 360 Documentation","text":"<p>In this section: Articles about the Xbox 360 hardware and system software written by Ainex contributors!</p>"},{"location":"development/console-docs/cpu/","title":"CPU Documentation","text":""},{"location":"development/console-docs/cpu/#the-jit","title":"The JIT","text":"<p>The JIT is the core of Ainex. It translates Xenon PowerPC code into native code runnable on the host computer.</p> <p>There are 3 phases to translation: 1. Translation to IR (intermediate representation) 2. IR compilation/optimization 3. Backend emission</p> <p>PowerPC instructions are translated to Ainex's intermediate representation format in src/xenia/cpu/ppc/ppc_emit_*.cc (e.g. processor control is done in ppc_emit_control.cc). HIR opcodes are relatively simple opcodes such that any host can define an implementation.</p> <p>After the HIR is generated, it is ran through a compiler to prep it for generation. The compiler is ran in a series of passes, the order of which is defined in ppc_translator.cc. Some passes are essential to the successful generation, while others are merely for optimization purposes. Compiler passes are defined in src/xenia/cpu/compiler/passes with descriptive class names.</p> <p>Finally, the backend consumes the HIR and emits code that runs natively on the host. Currently, the only backend that exists is the x64 backend, with all the emission done in x64_sequences.cc.</p>"},{"location":"development/console-docs/cpu/#abi","title":"ABI","text":"<p>Ainex guest functions are not directly callable, but rather must be called through APIs provided by Ainex. Ainex will first execute a thunk to transition the host context to a state dependent on the JIT backend, and that will call the guest code.</p>"},{"location":"development/console-docs/cpu/#x64","title":"x64","text":"<p>Transition thunks defined in x64_backend.cc. Registers are stored on the stack as defined by StackLayout::Thunk for later transitioning back to the host.</p> <p>Some registers are reserved for usage by the JIT to store temporary variables. See: X64Emitter::gpr_reg_map_ and X64Emitter::xmm_reg_map_.</p>"},{"location":"development/console-docs/cpu/#integer-registers","title":"Integer Registers","text":"Register Usage RAX Scratch RBX JIT temp RCX Scratch RDX Scratch RSP Stack Pointer RBP Unused RSI PowerPC Context RDI Virtual Memory Base R8-R11 Unused (parameters) R12-R15 JIT temp"},{"location":"development/console-docs/cpu/#floating-point-registers","title":"Floating Point Registers","text":"Register Usage XMM0-XMM5 Scratch XMM6-XMM15 JIT temp"},{"location":"development/console-docs/cpu/#memory","title":"Memory","text":"<p>Ainex defines virtual memory as a mapped range beginning at Memory::virtual_membase(), and physical memory as another mapped range from Memory::physical_membase() (usually 0x100000000 and 0x200000000, respectively). If the default bases are not available, they are shifted left 1 bit until an available range is found.</p> <p>The guest only has access to these ranges, nothing else.</p>"},{"location":"development/console-docs/cpu/#map","title":"Map","text":"<pre><code>0x00000000 - 0x3FFFFFFF (1024mb) - virtual 4k pages\n0x40000000 - 0x7FFFFFFF (1024mb) - virtual 64k pages\n0x80000000 - 0x8BFFFFFF ( 192mb) - xex 64k pages\n0x8C000000 - 0x8FFFFFFF (  64mb) - xex 64k pages (encrypted)\n0x90000000 - 0x9FFFFFFF ( 256mb) - xex 4k pages\n0xA0000000 - 0xBFFFFFFF ( 512mb) - physical 64k pages (overlapped)\n0xC0000000 - 0xDFFFFFFF          - physical 16mb pages (overlapped)\n0xE0000000 - 0xFFFFFFFF          - physical 4k pages (overlapped)\n</code></pre> <p>Virtual pages are usually allocated by NtAllocateVirtualMemory, and physical pages are usually allocated by MmAllocatePhysicalMemoryEx.</p> <p>Virtual pages mapped to physical memory are also mapped to the physical membase, i.e. virtual 0xA0000000 == physical 0x00000000</p> <p>The 0xE0000000-0xFFFFFFFF range is mapped to physical memory with a single 4 KB page offset. On Windows, memory mappings must be aligned to 64 KB, so the offset has to be added when guest addresses are converted to host addresses in the translated CPU code. This can't be faked other ways because calculations involving the offset are built into games - see the following sequence:</p> <pre><code>srwi      r9, r10, 20       # r9 = r10 &gt;&gt; 20\nclrlwi    r10, r10, 3       # r10 = r10 &amp; 0x1FFFFFFF (physical address)\naddi      r11, r9, 0x200\nrlwinm    r11, r11, 0,19,19 # r11 = r11 &amp; 0x1000\nadd       r11, r11, r10     # add 1 page to addresses &gt; 0xE0000000\n\n# r11 = addess passed to GPU\n</code></pre>"},{"location":"development/console-docs/cpu/#memory-management","title":"Memory Management","text":"<p>TODO</p>"},{"location":"development/console-docs/cpu/#references","title":"References","text":""},{"location":"development/console-docs/cpu/#powerpc","title":"PowerPC","text":"<p>The processor in the 360 is a 64-bit PowerPC chip running in 32-bit mode. Programs are still allowed to use 64-bit PowerPC instructions, and registers are 64-bit as well, but 32-bit instructions will run in 32-bit mode. The CPU is largely similar to the PPC part in the PS3, so Cell documents often line up for the core instructions. The 360 adds some additional AltiVec instructions, though, which are only documented in a few places (like the gcc source code, etc).</p> <ul> <li>Free60 Info</li> <li>Power ISA docs (aka 'PowerISA')</li> <li>PowerPC Programming Environments Manual (aka 'pem_64')</li> <li>PowerPC Vector PEM</li> <li>AltiVec PEM</li> <li>VMX128 Opcodes</li> <li>AltiVec Decoding</li> </ul>"},{"location":"development/console-docs/cpu/#x64_1","title":"x64","text":"<ul> <li>Intel Manuals</li> <li>Combined Intel Manuals</li> <li>Apple AltiVec/SSE Migration Guide</li> </ul>"},{"location":"development/console-docs/cpu_todo/","title":"CPU TODO","text":"<p>There are many improvements that can be done under <code>xe::cpu</code> to improve debugging, performance (both to JIT and of generated code), and portability. Some are in various states of completion, and others are just thoughts that need more exploring.</p>"},{"location":"development/console-docs/cpu_todo/#debugging-improvements","title":"Debugging Improvements","text":""},{"location":"development/console-docs/cpu_todo/#reproducable-x64-emission","title":"Reproducable X64 Emission","text":"<p>It'd be useful to be able to run a PPC function through the entire pipeline and spit out x64 that is byte-for-byte identical across runs. This would allow automated verification, bulk analysis, etc. Currently <code>X64Emitter::Emplace</code> will relocate the x64 when placing it in memory, which will be at a different location each time. Instead it would be nice to have the xbyak <code>calcJmpAddress</code> that performs the relocations use the address of our choosing.</p>"},{"location":"development/console-docs/cpu_todo/#sampling-profiler","title":"Sampling Profiler","text":"<p>Once we have stack walking it'd be nice to take something like micro-profiler and augment it to support our system. This would let us run continuous performance analysis and track hotspots in JITed code without a large performance impact. Automatically showing the top hot functions in the debugger could help track down poor translation much faster.</p>"},{"location":"development/console-docs/cpu_todo/#intel-architecture-code-analyzer-support","title":"Intel Architecture Code Analyzer Support","text":"<p>The Intel ACA is a nifty tool that, given a kernel of x64, can detail theoretical performance characteristics on different processors down to cycle timings and potential bottlenecks on memory/execution units. It's designed to run on elf/obj/etc files however it simply looks for special markers in the code. Having something that walks the code cache and dumps a specially formatted file with the markers around basic blocks could allow running the tool in bulk, or alternatively being able to invoke it one-off by dumping a specific x64 block to disk and processing it for display when looking at the code in the debugger would be useful.</p> <p>I've done some early experiments with this and its possible to pass just a bin file with the markers and the x64.</p>"},{"location":"development/console-docs/cpu_todo/#function-tracingcoverage-information","title":"Function Tracing/Coverage Information","text":"<p><code>function_trace_data.h</code> contains the <code>FunctionTraceData</code> struct, which is currently partially populated by the x64 backend. This enables tracking of which threads a function is called on, function call count, recent callers of the function, and even instruction-level counts.</p> <p>This is all only partially implemented, though, and there's no tool to read it out. This would be nice to get integrated into the debugger so that it can overlay the information when viewing a function, but also useful in aggregate to find hot functions/code paths or enhance callstacks by automatically annotating thread information.</p>"},{"location":"development/console-docs/cpu_todo/#block-level-counting","title":"Block-level Counting","text":"<p>Currently the code assumes each instruction has a count, however this is expensive and often unneeded as it can be done on a block level and then the instruction counts can be derived from that. This can reduce the overhead (both in memory and accounting time) by an order of magnitude.</p>"},{"location":"development/console-docs/cpu_todo/#on-stack-context-inspection","title":"On-Stack Context Inspection","text":"<p>Currently the debugger only works with <code>--store_all_context_values</code>, as it can only get the values of PPC registers when they are stored to the PPC context after each instruction. As this can slow things down by ~10-20% it could be useful to be able to preserve the optimized and register-allocated HIR so that host registers holding context values can be derived on demand. Or, we could just make <code>--store_all_context_values</code> faster.</p>"},{"location":"development/console-docs/cpu_todo/#jit-performance-improvements","title":"JIT Performance Improvements","text":""},{"location":"development/console-docs/cpu_todo/#reduce-hir-size","title":"Reduce HIR Size","text":"<p>Currently there are a lot of pointers stored within <code>Instr</code>, <code>Value</code>, and related types. These are big 8B values that eat a lot of memory and really hurt the cache (especially with all the block/instruction walking done). Aligning everything to 16B values in the arena and using 16bit indices (or something) could shrink things a lot.</p>"},{"location":"development/console-docs/cpu_todo/#serialize-code-cache","title":"Serialize Code Cache","text":"<p>The x64 code cache is currently set up to use fixed memory addresses and is even represented as mapped memory. It should be fairly easy to back this with a file and have all code written to disk. Adding more metadata, or perhaps a side-car file, would allow for the code to be written to disk. On future runs the code cache could load this data (by mapping the file containing the code right into memory) and short cut JIT'ing entirely.</p> <p>It would be possible to use a common container format (ELF/etc), however there's elegance in not requiring any additional steps beyond the memory mapping. Such containers could be useful for running static tools against, though.</p>"},{"location":"development/console-docs/cpu_todo/#portability-improvements","title":"Portability Improvements","text":""},{"location":"development/console-docs/cpu_todo/#emulated-opcode-layer","title":"Emulated Opcode Layer","text":"<p>Having a way to use emulated variants for any HIR opcode in a backend would help when writing a new backend as well as when verifying the existing backends. This may look like a C library with functions for each opcode/type pairing and utilities to call out to them. Something like the x64 backend could then call out to these with CallNativeSafe (or some faster equivalent) and something like an interpreter backend would be fairly trivial to write.</p>"},{"location":"development/console-docs/cpu_todo/#x64-backend-improvements","title":"X64 Backend Improvements","text":""},{"location":"development/console-docs/cpu_todo/#implement-emulated-instructions","title":"Implement Emulated Instructions","text":"<p>There are a ton of half-implemented HIR opcodes that call out to C++ to do their work. These are extremely expensive as they incur a full guest-to-host thunk (~hundreds of instructions!). Basically, any of the <code>Emulate*</code>/<code>CallNativeSafe</code> functions in <code>x64_sequences.cc</code> need to be replaced with proper AVX/AVX2 variants.</p>"},{"location":"development/console-docs/cpu_todo/#increase-register-availability","title":"Increase Register Availability","text":"<p>Currently only a few x64 registers are usable (due to reservations by the backend or ABI conflicts). Though register pressure is surprisingly light in most cases there are pathological cases that result in a lot of spills. By freeing up some of the registers these spills could be reduced.</p>"},{"location":"development/console-docs/cpu_todo/#constant-pooling","title":"Constant Pooling","text":"<p>This may make sense as a compiler pass instead.</p> <p>Right now, particular sequences of instructions are nasty - such as anything using <code>LoadConstantXmm</code> to load non-zero or non-1 vec128's. Instead of doing the super fat (20-30byte!) constant loads as they are done now it may be better to keep a per-function constant table and instead use RIP-relative addressing (or something) to use the memory-form AVX instructions.</p> <p>For example, right now this: <pre><code>  v82.v128 = [0,1,2,3]\n  v83.v128 = or v81.v128, v82.128\n</code></pre></p> <p>Translates to (something like): <pre><code>  mov([rsp+0x...], 0x00000000)\n  mov([rsp+0x...+4], 0x00000001)\n  mov([rsp+0x...+8], 0x00000002)\n  mov([rsp+0x...+12], 0x00000003)\n  vmovdqa(xmm2, [rsp+0x...])\n  vor(xmm2, xmm2, xmm2)\n</code></pre></p> <p>Where as it could be: <pre><code>  vor(xmm2, xmm2, [rip+0x...])\n</code></pre></p> <p>Whether the cost of doing the constant de-dupe is worth it remains to be seen. Right now it's wasting a lot of instruction cache space, increasing decode time, and potentially using a lot more memory bandwidth.</p>"},{"location":"development/console-docs/cpu_todo/#optimization-improvements","title":"Optimization Improvements","text":""},{"location":"development/console-docs/cpu_todo/#speed-up-registerallocationpass","title":"Speed Up RegisterAllocationPass","text":"<p>Currently the slowest pass, this could be improved by requiring less use tracking or perhaps maintaining the use tracking in other passes. A faster SortUsageList (radix or something fancy?) may be helpful as well.</p>"},{"location":"development/console-docs/cpu_todo/#more-opcodes-in-constantpropagationpass","title":"More Opcodes in ConstantPropagationPass","text":"<p>There's a few HIR opcodes with no handling, and others with minimal handling. It'd be nice to know what paths need improvement and add them, as any work here makes things free later on.</p>"},{"location":"development/console-docs/cpu_todo/#cross-block-constantpropagationpass","title":"Cross-Block ConstantPropagationPass","text":"<p>Constant propagation currently only occurs within a single block. This makes it difficult to optimize common PPC patterns like loading the constants 0 or 1 into a register before a loop and other loads of expensive altivec values.</p> <p>Either ControlFlowAnalysisPass or DataFlowAnalysisPass could be piggy-backed to track constant load_context/store_context's across block bounds and propagate the values. This is simpler than dynamic values as no phi functions or anything fancy needs to happen.</p>"},{"location":"development/console-docs/cpu_todo/#add-typepropagationpass","title":"Add TypePropagationPass","text":"<p>There are many extensions/truncations in generated code right now due to various load/stores of varying widths. Being able to find and short- circuit the conversions early on would make following passes cleaner and faster as they'd have to trace through fewer value definitions and there'd be less extraneous movs in the final code.</p> <p>Example (after ContextPromotion): <pre><code>  v82.i32 = truncate v81.i64\n  v83.i32 = and v82.i32, 3F\n  v85.i64 = zero_extend v84.i32\n</code></pre></p> <p>Becomes (after DCE/etc): <pre><code>  v85.i64 = and v81.i64, 3F\n</code></pre></p>"},{"location":"development/console-docs/cpu_todo/#enhance-memorysequencecombinationpass-with-extendtruncate","title":"Enhance MemorySequenceCombinationPass with Extend/Truncate","text":"<p>Currently this pass will look for byte_swap and merge that into loads/stores. This allows for better final codegen at the cost of making optimization more difficult, so it only happens at the end of the process.</p> <p>There's currently TODOs in there for adding extend/truncate support, which will extend what it does with swaps to also merge the sign_extend/zero_extend/truncate into the matching load/store. This allows for the x64 backend to generate the proper mov's that do these operations without requiring additional steps. Note that if we had a LIR and a peephole optimizer this would be better done there.</p> <p>Load with swap and extend: <pre><code>  v1.i32 = load v0\n  v2.i32 = byte_swap v1.i32\n  v3.i64 = zero_extend v2.i32\n</code></pre></p> <p>Becomes: <pre><code>  v1.i64 = load_convert v0, [swap|i32-&gt;i64,zero]\n</code></pre></p> <p>Store with truncate and swap: <pre><code>  v1.i64 = ...\n  v2.i32 = truncate v1.i64\n  v3.i32 = byte_swap v2.i32\n  store v0, v3.i32\n</code></pre></p> <p>Becomes: <pre><code>  store_convert v0, v1.i64, [swap|i64-&gt;i32,trunc]\n</code></pre></p>"},{"location":"development/console-docs/cpu_todo/#add-deadstoreeliminationpass","title":"Add DeadStoreEliminationPass","text":"<p>Generic DSE pass, removing all redundant stores. ContextPromotion may be able to take care of most of these, as the input assembly is generally pretty optimized already. This pass would mainly be looking for introduced stores, such as those from comparisons.</p> <p>Currently ControlFlowAnalysisPass will annotate blocks with incoming/outgoing edges as well as dominators, and that could be used to check whether stores into the context are used in their destination block or instead overwritten (currently they almost never are).</p> <p>If this pass was able to remove a good number of the stores then the comparisons would also be removed with dead code elimination and dramatically reduce branch overhead.</p> <p>Example: <pre><code>&lt;block0&gt;:\n  v0 = compare_ult ...     (later removed by DCE)\n  v1 = compare_ugt ...     (later removed by DCE)\n  v2 = compare_eq ...\n  store_context +300, v0   &lt;-- removed\n  store_context +301, v1   &lt;-- removed\n  store_context +302, v2   &lt;-- removed\n  branch_true v1, ...\n&lt;block1&gt;:\n  v3 = compare_ult ...\n  v4 = compare_ugt ...\n  v5 = compare_eq ...\n  store_context +300, v3   &lt;-- these may be required if at end of function\n  store_context +301, v4       or before a call\n  store_context +302, v5\n  branch_true v5, ...\n</code></pre></p>"},{"location":"development/console-docs/cpu_todo/#add-x64canonicalizationpass","title":"Add X64CanonicalizationPass","text":"<p>For various opcodes add copies/commute the arguments to match x64 operand semantics. This makes code generation easier and if done before register allocation can prevent a lot of extra shuffling in the emitted code.</p> <p>Example: <pre><code>&lt;block0&gt;:\n  v0 = ...\n  v1 = ...\n  v2 = add v0, v1          &lt;-- v1 now unused\n</code></pre></p> <p>Becomes: <pre><code>  v0 = ...\n  v1 = ...\n  v1 = add v1, v0          &lt;-- src1 = dest/src, so reuse for both\n                               by commuting and setting dest = src1\n</code></pre></p>"},{"location":"development/console-docs/cpu_todo/#add-mergelocalslotspass","title":"Add MergeLocalSlotsPass","text":"<p>As the RegisterAllocationPass runs it generates load_local/store_local as it spills. Currently each set of locals is unique to each block, which in very large functions can result in a lot of locals that are only used briefly. It may be useful to use the results of the ControlFlowAnalysisPass to track local liveness and merge the slots so they are reused when they cannot possibly be live at the same time. This saves stack space and potentially improves cache behavior.</p>"},{"location":"development/console-docs/gpu/","title":"GPU Documentation","text":""},{"location":"development/console-docs/gpu/#the-xenos-chip","title":"The Xenos Chip","text":"<p>The Xenos is a graphics chip designed by AMD based off of the R5xx architecture.</p>"},{"location":"development/console-docs/gpu/#command-processing","title":"Command Processing","text":"<p>The Xenos runs commands supplied to it directly by the DirectX bare-bones driver via a ringbuffer located in system memory.</p> <p>The bulk of the command processing code is located at src/xenia/gpu/command_processor.cc</p>"},{"location":"development/console-docs/gpu/#edram","title":"EDRAM","text":"<p>The Xenos uses special high-speed memory located on the same die as the chip to  store framebuffers/render targets.</p> <p>TODO: More documentation</p>"},{"location":"development/console-docs/gpu/#options","title":"Options","text":""},{"location":"development/console-docs/gpu/#general","title":"General","text":"<p>See the top of gpu_flags.cc.</p> <p><code>--vsync=false</code> will attempt to render the game as fast as possible instead of waiting for a fixed 60hz timer.</p>"},{"location":"development/console-docs/gpu/#vulkan","title":"Vulkan","text":"<p>See the top of vulkan_gpu_flags.cc.</p> <p><code>vulkan_dump_disasm=true</code> \"Dump shader disassembly. NVIDIA only supported.\"</p>"},{"location":"development/console-docs/gpu/#tools","title":"Tools","text":""},{"location":"development/console-docs/gpu/#shaders","title":"Shaders","text":""},{"location":"development/console-docs/gpu/#shader-dumps","title":"Shader Dumps","text":"<p>Adding <code>--dump_shaders=path/</code> will write all translated shaders to the given path with names based on input hash (so they'll be stable across runs). Binaries containing the original microcode will be placed side-by-side with the dumped output to make it easy to pipe to <code>xe-gpu-shader-compiler</code>.</p>"},{"location":"development/console-docs/gpu/#xe-gpu-shader-compiler","title":"xe-gpu-shader-compiler","text":"<p>A standalone shader compiler exists to allow for quick shader translation testing. You can pass a binary ucode shader in and get either disassembled ucode or translated source out. This is best used through the Shader Playground tool.</p> <pre><code>  xe-gpu-shader-compiler \\\n      --shader_input=input_file.bin.vs (or .fs)\n      --shader_output=output_file.txt\n      --shader_output_type=ucode (or spirvtext)\n</code></pre>"},{"location":"development/console-docs/gpu/#shader-playground","title":"Shader Playground","text":"<p>Built separately (for now) under tools/shader-playground/ is a GUI for interactive shader assembly, disassembly, validation, and translation.</p> <p></p> <p>Entering shader microcode on the left will invoke the XNA Game Studio D3D compiler to translate the ucode to binary. The D3D compiler is then used to disassemble the binary and display the optimized form. If <code>xe-gpu-shader-compiler</code> has been built the ucode will be passed to that for disassembly and that will then be passed through D3D compiler. If the output of D3D compiler on the ainex disassembly doesn't match the original D3D compiler output the box will turn red, indicating that the disassembly is broken. Finally, the right most box will show the translated shader in the desired format.</p> <p>For more information and setup instructions see tools/shader-playground/README.md.</p>"},{"location":"development/console-docs/gpu/#xe-gpu-trace-viewer","title":"xe-gpu-trace-viewer","text":"<p>To quickly iterate on graphical issues, ainex can dump frames (or sequences of frames) while running that can be opened and inspected in a separate app.</p> <p>The basic workflow is:</p> <ol> <li>Capture the frame in game (using F4) or a stream of frames.</li> <li>Add the file path to the xe-gpu-trace-viewer Debugging command line in Visual Studio.</li> <li>Launch xe-gpu-trace-viewer.</li> <li>Poke around, find issues, etc.</li> <li>Modify code.</li> <li>Build and relaunch.</li> <li>Goto 4.</li> </ol>"},{"location":"development/console-docs/gpu/#capturing-frames","title":"Capturing Frames","text":"<p>First, specify a path to capture traces to with <code>--trace_gpu_prefix=path/file_prefix_</code>. All files will have a randomish name based on that.</p> <p>When running ainex.exe you can hit F4 at any time to capture the next frame the game tries to draw (up until a VdSwap call). The file can be used immediately.</p>"},{"location":"development/console-docs/gpu/#capturing-sequences","title":"Capturing Sequences","text":"<p>Passing <code>--trace_gpu_stream</code> will write all frames rendered to a file, allowing you to seek through them in the trace viewer. These files will get large.</p>"},{"location":"development/console-docs/gpu/#references","title":"References","text":""},{"location":"development/console-docs/gpu/#command-bufferregisters","title":"Command Buffer/Registers","text":"<p>Registers documented at register_table.inc.</p> <p>PM4 commands documented at xenos.h.</p>"},{"location":"development/console-docs/gpu/#performance-counters-that-may-be-read-back-by-d3d","title":"Performance Counters that may be read back by D3D","text":"They are 64-bit values and have a high and low 32-bit register as well as a <code>SELECT</code> register each: CP_PERFCOUNTER0 RBBM_PERFCOUNTER0 RBBM_PERFCOUNTER1 SQ_PERFCOUNTER0 SQ_PERFCOUNTER1 SQ_PERFCOUNTER2 SQ_PERFCOUNTER3 VGT_PERFCOUNTER0 VGT_PERFCOUNTER1 VGT_PERFCOUNTER2 VGT_PERFCOUNTER3 VC_PERFCOUNTER0 VC_PERFCOUNTER1 VC_PERFCOUNTER2 VC_PERFCOUNTER3 PA_SU_PERFCOUNTER0 PA_SU_PERFCOUNTER1 PA_SU_PERFCOUNTER2 PA_SU_PERFCOUNTER3 PA_SC_PERFCOUNTER0 PA_SC_PERFCOUNTER1 PA_SC_PERFCOUNTER2 PA_SC_PERFCOUNTER3 HZ_PERFCOUNTER0 HZ_PERFCOUNTER1 TCR_PERFCOUNTER0 TCR_PERFCOUNTER1 TCM_PERFCOUNTER0 TCM_PERFCOUNTER1 TCF_PERFCOUNTER0 TCF_PERFCOUNTER1 TCF_PERFCOUNTER2 TCF_PERFCOUNTER3 TCF_PERFCOUNTER4 TCF_PERFCOUNTER5 TCF_PERFCOUNTER6 TCF_PERFCOUNTER7 TCF_PERFCOUNTER8 TCF_PERFCOUNTER9 TCF_PERFCOUNTER10 TCF_PERFCOUNTER11 TP0_PERFCOUNTER0 TP0_PERFCOUNTER1 TP1_PERFCOUNTER0 TP1_PERFCOUNTER1 TP2_PERFCOUNTER0 TP2_PERFCOUNTER1 TP3_PERFCOUNTER0 TP3_PERFCOUNTER1 SX_PERFCOUNTER0 BC_PERFCOUNTER0 BC_PERFCOUNTER1 BC_PERFCOUNTER2 BC_PERFCOUNTER3 MC0_PERFCOUNTER0 MC1_PERFCOUNTER0 MH_PERFCOUNTER0 MH_PERFCOUNTER1 MH_PERFCOUNTER2 BIF_PERFCOUNTER0"},{"location":"development/console-docs/gpu/#shaders_1","title":"Shaders","text":"<ul> <li>LLVM R600 Tables ** The opcode formats don't match, but the name-&gt;psuedo code is correct.</li> <li>xemit</li> </ul>"},{"location":"development/console-docs/kernel/","title":"Kernel Documentation","text":""},{"location":"development/console-docs/kernel/#kernel-shims","title":"Kernel shims","text":"<p>Ainex implements all kernel APIs as native functions under the host.</p> <p>When a module is loaded, the loader will find all kernel imports, put a syscall in their place, then lookup a kernel export and link it to each import. The JIT will generate a sequence of instructions to call into Ainex's export if it encounters a syscall.</p> <p>Currently, there are two ways an export can be defined - for example: * <code>SHIM_CALL XAudioGetSpeakerConfig_shim(PPCContext* ppc_context, KernelState* kernel_state)</code> * <code>dword_result_t XAudioGetSpeakerConfig(lpdword_t config_ptr)</code></p> <p>The <code>SHIM_CALL</code> convention is deprecated, but allows a closer look at the internals of how calls are done. <code>ppc_context</code> is the guest PowerPC context, which holds all guest registers. Function parameters are fetched from r3...r10 (<code>SHIM_GET_ARG_32</code>), and additional parameters are loaded from the stack. The return value (if there is one) is stored in r3 (<code>SHIM_SET_RETURN_32</code>).</p> <p>Details on how calls transition from guest -&gt; host can be found in the cpu documentation.</p> <p>The newer convention does the same, but uses templates to automate the process of loading arguments and setting a return value.</p>"},{"location":"development/console-docs/kernel/#kernel-modules","title":"Kernel Modules","text":"<p>Ainex has an implementation of two xbox kernel modules, xboxkrnl.exe and xam.xex</p>"},{"location":"development/console-docs/kernel/#xboxkrnlexe-xbox-kernel","title":"xboxkrnl.exe - Xbox kernel","text":"<p>Defined under src/xenia/kernel/xboxkrnl.</p> <p>This is a slightly modified version of the NT kernel. Most of the APIs  are equivalent to ones you'd find on MSDN or other online sources.</p> <p>Source files are organized into groups of APIs.</p>"},{"location":"development/console-docs/kernel/#xamxex-xbox-auxiliary-methods","title":"xam.xex - Xbox Auxiliary Methods","text":"<p>Defined under src/xenia/kernel/xam.</p> <p>This module implements functionality specific to the Xbox.</p>"},{"location":"development/references/","title":"Developer References","text":"<p>This section of the wiki provides links and downloads for useful references about the Xbox 360 and Ainex's target platforms.</p> <p>Links</p> <p>Xbox 360 References Target References</p>"},{"location":"development/references/console/","title":"Developer References","text":"<p>In this section, you can find references that may help you as a developer of Ainex, or as a maintainer of the wiki.</p> <p>Another great resource you may consider contributing to is the Free60 Wiki. If you have some information about the Xbox 360 you would like to write an article on, please consider sharing it there, and linking it here.</p> <p>If you find a relevant (public) PDF file, you can add it to the repo for archival purposes and link it here. See the <code>console-refs/documents</code> folder on GitHub.</p>"},{"location":"development/references/console/#tools","title":"Tools","text":""},{"location":"development/references/console/#reverse-engineering","title":"Reverse Engineering","text":"Name + Link Description + Author Ghidra Open source tool for decompiling binary files developed by the NSA XexLoaderWV Plugin by WarrantyVoider for Ghidra that allows XEX2 executables to be decompiled IDA Pro Premium closed source tool for decompiling binary files IDAXex Plugin developed by emoose for IDA Pro that allows decompiling XEX binaries of multiple formats"},{"location":"development/references/console/#xbox-360-hardware","title":"Xbox 360 Hardware","text":"CPU Name + Link Description + Author PowerPC Core Instructions Core PowerPC CPU instruction set by IBM PowerP{ AltiVec Instructions AltiVec Instruction set by Motorola GPU Name + Link Description + Author AMD R600 Instruction Set Architecture Official AMD R600 ISA documentation"},{"location":"development/references/console/#xbox-360-software","title":"Xbox 360 Software","text":""},{"location":"development/references/target/","title":"Target References","text":"<p>In this section you can find references about target hardware that may be useful for developers.</p> <p>Targets</p> <ul> <li>Windows</li> <li>Linux</li> <li>Android</li> </ul>"},{"location":"development/references/target/android/","title":"Android","text":""},{"location":"development/references/target/android/#tools","title":"Tools","text":"Title + Link Description + Author Android Studio Google's official Android SDK for Windows, Mac, Linux, and ChromeOS. Snapdragon Profiler Qualcomm tool that allows developers to analyze CPU, GPU, DSP, memory, power, thermal, and network data. Adreno GPU SDK Qualcomm SDK for development on Adreno GPU platforms."},{"location":"development/references/target/android/#hardware-docs","title":"Hardware Docs","text":"Title + Link Description + Author VK_QCOM_render_pass_transform_extension Qualcomm Vulkan vendor extension developer guide. Snapdragon OpenCL Programming and Optimization Guide Qualcomm developer guide for general programming and optimization on the Snapdragon 420 using OpenCL. generated by pstoedit version:3.44 from NVBadge_2D.eps Tegra X1 Whitepaper Official overview of the Tegra X1 SOC by NVIDIA."},{"location":"development/references/target/android/#software-docs","title":"Software Docs","text":"Title + Link Description + Author generated by pstoedit version:3.44 from NVBadge_2D.eps Tegra Khronos SDK Documentation Official documentation of the NVIDIA Khronos Apps SDK including installation instructions."},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#how-do-i-use-ainex","title":"How do I use Ainex?","text":"<p>Refer to the Quickstart page.</p>"},{"location":"faq/#what-are-ainexs-system-requirements","title":"What are Ainex's system requirements?","text":"<p>See the Quickstart page</p>"},{"location":"faq/#how-do-i-fix-the-vcruntime-error","title":"How do I fix the VCRUNTIME error?","text":"<p>Refer to the Quickstart page.</p>"},{"location":"faq/#why-do-i-get-an-error-saying-your-cpu-does-not-support-avx","title":"Why do I get an error saying \"Your CPU does not support AVX\"?","text":"<p>Your CPU doesn't meet the minimum requirements.</p> <p>See the Quickstart page</p>"},{"location":"faq/#how-do-i-dump-games","title":"How do I dump games?","text":"<p>See the guide in Quickstart.</p>"},{"location":"faq/#how-do-i-improve-performance","title":"How do I improve performance?","text":"<p>Upgrade your PC or wait for optimizations.</p>"},{"location":"faq/#does-ainex-support-opengldirect3d11","title":"Does Ainex support OpenGL/Direct3D11?","text":"<p>No. (see the system requirements)</p>"},{"location":"faq/#why-is-the-audio-delayed","title":"Why is the audio delayed?","text":"<p>Audio is one of the least worked on things in Ainex. There is no fix.</p>"},{"location":"faq/#how-do-i-fix-graphics-device-lost-probably-due-to-an-internal-error","title":"How do I fix \"Graphics device lost (probably due to an internal error\"?","text":"<p>You can't.</p>"},{"location":"faq/#can-you-add-support-for-windows-me-how-about-my-pentium-ii","title":"Can you add support for Windows Me? How about my Pentium II?","text":"<p>Support for older operating systems and processors will not be added unless a contributor steps up to build and maintain them. All active contributors are on modern systems and busy with higher priority tasks. Whether the emulator runs on Windows Vista or not doesn't matter if it can't run games.</p>"},{"location":"faq/#does-ainex-run-on-linux-or-macos","title":"Does Ainex run on Linux or macOS?","text":"<p>Not natively, but Ainex may run with Wine on Linux using Vulkan.</p> <p>D3D12 will only work on Windows 10+ due to vkd3d not being supported.</p> <p>macOS is not compatible due to requiring MoltenVK/Metal support which isn't implemented in Ainex.</p>"},{"location":"faq/#can-i-dump-games-using-an-xbox-oneseries-sx-or-run-them-directly-from-the-disc","title":"Can I dump games using an Xbox One/Series S|X or run them directly from the disc?","text":"<p>No, and no.</p>"},{"location":"faq/#why-is-my-game-in-trialdemo-mode","title":"Why is my game in trial/demo mode?","text":"<p>See this option.</p>"},{"location":"faq/#does-game-x-run","title":"Does game X run?","text":"<p>Check the compatibility list. If it's not there, please test it yourself.</p>"},{"location":"faq/#whats-the-difference-between-gameplay-and-playable","title":"What's the difference between Gameplay and Playable?","text":"<p>Gameplay means the game reaches gameplay, even if the game is unplayable.</p>"},{"location":"faq/#why-arent-saves-working-storage-device-not-foundfullnot-detected-etc","title":"Why aren't saves working? (Storage device not found/full/not detected, etc)","text":"<p>Saves are broken in some games in Ainex, especially ones with user profile saves.</p> <p>As for saves, etc that worked previously in older builds of Ainex, create a text file in the same directory as xenia.exe named <code>portable.txt</code>.</p>"},{"location":"faq/#where-are-saves-stored","title":"Where are saves stored?","text":"<p>Saves are in <code>Documents\\xenia\\content</code> by default.</p> <p>If a <code>portable.txt</code> file is in the same directory as xenia.exe the <code>content</code> folder will be in the same directory as <code>xenia.exe</code>.</p>"},{"location":"faq/#can-ainex-play-games-online-with-xbox-live","title":"Can Ainex play games online with Xbox Live?","text":"<p>Ainex may connect to custom servers in the far future, but it will never connect to official Xbox Live servers.</p> <p>Ainex does not support System Link either.</p>"},{"location":"faq/#how-do-i-check-my-fps","title":"How do I check my FPS?","text":"<p>With an FPS indicator like Rivatuner.</p>"},{"location":"faq/#what-is-rov","title":"What is ROV?","text":"<p>See ROV</p>"},{"location":"faq/#what-are-ainexs-options","title":"What are Ainex's options?","text":"<p>See the Options page.</p>"},{"location":"faq/#can-ainex-run-original-xbox-games","title":"Can Ainex run original Xbox games?","text":"<p>Ainex does not support backwards compatibility, and therefore, cannot run original Xbox games.</p> <p>For that there's Cxbx-Reloaded, xqemu, and Xemu.</p>"},{"location":"faq/#i-have-a-copy-of-the-xdk-do-you-want-it","title":"I have a copy of the XDK. Do you want it?","text":"<p>No. Do not post links or downloads to such resources or you will be banned.</p>"},{"location":"faq/#build-tweaks","title":"Build tweaks","text":""},{"location":"faq/#43","title":"4:3","text":"<p>To play games in 4:3 you need to build Xenia with <code>video_mode-&gt;is_widescreen = 0</code> instead of 1 here.</p> <p>Refer to building.md on GitHub</p>"},{"location":"faq/#hacksmods","title":"Hacks/mods","text":"<p>Refer to the Game hacks, mods, etc. page.</p>"},{"location":"faq/hacks_and_mods/","title":"Game Hacks, Mods, etc.","text":""},{"location":"faq/hacks_and_mods/#ultrawide-219-329-etc","title":"Ultrawide (21:9, 32:9, etc)","text":"<p>THIS WILL NOT INCREASE RESOLUTION</p> <p>Ultrawide (21:9, 32:9, etc) hacks are possible. This guide is for rpcs3, but is applicable to Xenia.</p> <p>Some games like Halo 3 have a more convenient method that doesn't require Cheat Engine (recommended to backup default.xex):</p> <ol> <li> <p>Decrypt and decompress default.xex with xextool (game must be extracted first)</p> </li> <li> <p>Replace all <code>3F E3 8E 39</code> in default.xex with the desired aspect ratio (Formatted Value) in reverse order using a hex editor. For example, <code>39 8E 63 40</code> (32:9) would become <code>40 63 8E 39</code>*</p> </li> </ol> <p>This won't work for all games. The Cheat Engine method has higher compatibility.</p>"},{"location":"faq/roadmap/","title":"Roadmap","text":""},{"location":"faq/roadmap/#goals","title":"Goals","text":"<p>Normal emulator stuff. Games work, etc.</p>"},{"location":"faq/roadmap/#cross-platform-support","title":"Cross-platform Support","text":"<p>Linux support is slowly progressing, but really needs a strong contributor to fully support. Android support is also being experimented with. macOS support is highly unlikely unless Apple gets Vulkan support.</p>"},{"location":"faq/roadmap/#non-goals","title":"Non-Goals","text":"<p>There's a lot that could be done in the project, but there are many things that shouldn't be.</p>"},{"location":"faq/roadmap/#pixel-perfect-accuracy","title":"Pixel-perfect Accuracy","text":"<p>A lot of corners are cut for one reason or another: performance, lack of understanding, lack of documentation, etc. Getting something that perfectly matches the output on a real console isn't really possible with our approach. Conversely, this allows much more freedom to provide higher-quality or faster implementations.</p>"},{"location":"faq/roadmap/#xbox-live-connectivity","title":"Xbox Live Connectivity","text":"<p>Ainex will never be able to connect to the real Xbox Live network. A simulated Live-like network is possible, however anything that interfaces with the official Microsoft services is not something the project seeks to enable.</p>"},{"location":"faq/roadmap/#game-servers","title":"Game Servers","text":"<p>Some multiplayer games are peer-to-peer, however many have some server component required for either matchmaking or actual session hosting. Though it'd be possible to work with such homebrew servers if projects sprung up to support them Ainex itself will not be attempting to do so.</p>"},{"location":"faq/roadmap/#original-xbox-backwards-compatibility","title":"Original Xbox Backwards Compatibility","text":"<p>Microsoft released a compatibility layer that enabled original Xbox games to run on the 360. Though likely feasible to get running under Ainex, it's not a goal. There's likely to be a lot of trickery going on that most games don't do, and distribution of the compatibility layer isn't possible.</p>"},{"location":"faq/roadmap/#dreams","title":"Dreams","text":""},{"location":"faq/roadmap/#vr","title":"VR","text":"<p>Figure that out :)</p>"},{"location":"faq/roadmap/#simulated-xbox-live-network","title":"Simulated Xbox Live Network","text":"<p>Implement the system APIs for friend's list, leaderboards, etc. Reusing Steam or some other service would be ideal.</p>"},{"location":"faq/rov/","title":"Rov","text":"<p>Improves accuracy at the cost of performance. Recommended to be disabled.</p> Long ROV (rasterizer-ordered views) explanation <p>The Direct3D 12 mode in Ainex has two code paths for rendering output (the currently used one is displayed in the window title bar): \"RTV\" (Render Target Views) and \"ROV\" (Rasterizer-Ordered Views).</p> <p>On the Xbox 360, pixels are written to a 10 MB memory chip called the eDRAM, and many games reinterpret the data in it in different formats for various purposes (clearing, HDR rendering, etc.) This is not the case on PC, where different render targets are independent from each other.</p> <p>The \"RT\" path uses conventional PC render targets (RTV \u2014 Render Target Views \u2014 and DSV \u2014 Depth-Stencil Views \u2014 in Direct3D terms) for rendering output, and copies data between PC render target textures and the 10 MB buffer to allow for reinterpretation of eDRAM data in different formats.</p> <p>However, copying has a very heavy performance impact, causing noticeable slowdowns even on modern graphics cards. Another issue is that the Xbox 360 has certain render target formats not available on the PC (7e3 HDR floating-point, 16-bit fixed-point with \u221232\u202632 range, 20^4 floating-point depth) that have to be approximated with other render target formats. This causes unfixable transparency issues (because the blending hardware works with different ranges and precision of numbers) and depth buffer-related issues such as shadow acne.</p> <p>Using the Rasterizer-Ordered Views (ROV) feature of Direct3D 12 allows Ainex to overcome those issues by doing blending and depth/stencil testing manually in pixel shaders, rendering directly to the 10 MB buffer. This allows for much higher performance since there's no expensive data copying, and better accuracy because of no pixel format limitations.</p> <p>\"Rasterizer-ordered\" here means that access to the buffer is synchronized \u2014 if multiple polygons in a single draw call are covering the same pixel, the buffer will be accessed in the correct order, without conflicts that would happen if the data was written through a regular unordered access view (UAV). You can read more about this feature at Intel.com, another common use for ROV in game development is order-independent transparency algorithms.</p> <p>However, this is a hardware feature, and thus on older graphics cards, Ainex is limited to the RT path.</p> <p>Rasterizer-ordered views are used by default in Ainex where available, but if you're experiencing graphical issues, you may try disabling it in the config.</p> <p>The minimum requirements for ROV are:</p> <ul> <li>Nvidia GeForce GTX 950 on desktops, GTX 965M on laptops (Maxwell 2nd generation \u2014 2014)</li> <li>AMD Radeon Vega (GCN 5th generation \u2014 2017)</li> <li>Intel HD Graphics 4200 (2013)</li> </ul>"},{"location":"faq/options/","title":"Options / Configuration","text":""},{"location":"faq/options/#how-to-use","title":"How to use","text":"<ul> <li>Run Ainex if you haven't before.</li> <li>Show file name extensions in Explorer.</li> <li>Go to <code>Documents\\Ainex</code> and open <code>ainex.config.toml</code> in a text editor   like Notepad++.<ul> <li>If a <code>portable.txt</code> file is present in the same directory as <code>ainex.exe</code> it will be in the same directory   as <code>ainex.exe</code>.</li> <li>Per-game configs go in <code>config\\TitleID.config.toml</code>. Note that per-game configs are highly unstable, only   very few options can be changed from it safely or at all, as most emulator subsystems are initialized before   per-game configs are loaded.</li> </ul> </li> <li>For launchers/frontends like Bottlenose you can use the <code>--config</code>   launch parameter to specify what config to use.<ul> <li>To launch specific games, add the path to the game before the launch options. For   example: <code>ainex.exe path/to/game/default.xex --vsync=false</code></li> </ul> </li> </ul>"},{"location":"faq/options/#config-settings","title":"Config Settings","text":"<p>Each setting has a table explaining the different options. Expand a section by clicking it to see the table.</p> <p>Each table follows this pattern.</p> setting_name value type description value"},{"location":"faq/options/#apu","title":"APU","text":"APU <p> The system used to output audio to the speakers.</p> apu string The first available. (default) any No audio nop SDL2 sdl XAudio2 xaudio2 FFMPEG Verbose <p> Makes FFMPEG output verbose logging.</p> ffmpeg_verbose boolean Disable verbose logging. (default) false Enable verbose logging. true Mute <p> Mutes all audio output.</p> mute boolean Audio is enabled. (default) false Audio is disabled. true"},{"location":"faq/options/#cpu","title":"CPU","text":"Break on Unimplemented Instructions <p> Break to the host debugger if an unimplemented PowerPC instruction is encountered (or crash if no debugger is attached).</p> break_on_unimplemented_instructions bool On (default) true Off (hack, needed for certain games) false Clock: No scaling <p> Disable real-time clock scaling code. Time management and locking is bypassed. Guest system time is directly pulled from the host.</p> clock_no_scaling bool Guest time is scaled proportionally to the running speed. (default) false System time is pulled from directly the host. true Clock Source: Raw <p> Use the <code>RDTSC</code> instruction as the time source.</p> <p>Host CPU must support invariant TSC.</p> clock_source_raw bool Gets the guest time using the system clock. (default) false Gets the guest time using the <code>RDTSC</code> instruction. true CPU <p> The CPU backend to be used for emulation.</p> cpu string The first available. (default) any x86_64 architecture x64 <p>In all reality, the emulator can only be compiled for one CPU architecture at a time. This option is completely useless.</p>"},{"location":"faq/options/#config","title":"Config","text":""},{"location":"faq/options/#content","title":"Content","text":"License Mask <p> Set the license mask for activated content.</p> license_mask # No licenses enabled (Demo/Trial mode. default) 0 XBLA activated mode (First license enabled) 1 Full mode (All licenses enabled) -10xFFFFFFFF"},{"location":"faq/options/#d3d12","title":"D3D12","text":"DXGI Adapter <p> Index of the DXGI adapter to use. Enter any positive number to use a specific physical adapter.</p> d3d12_adapter # WARP software rendering. -2 Any physical adapter. (default) -1 CPU Readback After Render Target Resolving <p> This is needed for certain games</p> d3d12_readback_resolve bool Off (default) false On true"},{"location":"faq/options/#display","title":"Display","text":""},{"location":"faq/options/#gpu","title":"GPU","text":"Allow Invalid Fetch Constants <p> Allow texture and vertex fetch constants with invalid type - generally unsafe because the constant may contain completely invalid values, but may be used to bypass fetch constant type errors in certain games until the real reason why they're invalid is found.</p> gpu_allow_invalid_fetch_constants bool Off (default) false On (hack) true Renderer/Backend gpu string Any backend (default, recommended) any Direct3D 12 d3d12 Vulkan vulkan Null (blank/nothing) null Render target path <p>Leave this option blank for auto-selection.</p> render_target_path_d3d12 string Auto-selection RTV (recommended for speed) rtv ROV (if available, for higher accuracy in certain cases) rov <p>What is ROV (rasterizer-ordered views)?</p> <p>Improves accuracy at the cost of performance. Recommended to be disabled.</p> Long ROV (rasterizer-ordered views) explanation <p>The Direct3D 12 mode in Ainex has two code paths for rendering output (the currently used one is displayed in the window title bar): \"RTV\" (Render Target Views) and \"ROV\" (Rasterizer-Ordered Views).</p> <p>On the Xbox 360, pixels are written to a 10 MB memory chip called the eDRAM, and many games reinterpret the data in it in different formats for various purposes (clearing, HDR rendering, etc.) This is not the case on PC, where different render targets are independent from each other.</p> <p>The \"RT\" path uses conventional PC render targets (RTV \u2014 Render Target Views \u2014 and DSV \u2014 Depth-Stencil Views \u2014 in Direct3D terms) for rendering output, and copies data between PC render target textures and the 10 MB buffer to allow for reinterpretation of eDRAM data in different formats.</p> <p>However, copying has a very heavy performance impact, causing noticeable slowdowns even on modern graphics cards. Another issue is that the Xbox 360 has certain render target formats not available on the PC (7e3 HDR floating-point, 16-bit fixed-point with \u221232\u202632 range, 20^4 floating-point depth) that have to be approximated with other render target formats. This causes unfixable transparency issues (because the blending hardware works with different ranges and precision of numbers) and depth buffer-related issues such as shadow acne.</p> <p>Using the Rasterizer-Ordered Views (ROV) feature of Direct3D 12 allows Ainex to overcome those issues by doing blending and depth/stencil testing manually in pixel shaders, rendering directly to the 10 MB buffer. This allows for much higher performance since there's no expensive data copying, and better accuracy because of no pixel format limitations.</p> <p>\"Rasterizer-ordered\" here means that access to the buffer is synchronized \u2014 if multiple polygons in a single draw call are covering the same pixel, the buffer will be accessed in the correct order, without conflicts that would happen if the data was written through a regular unordered access view (UAV). You can read more about this feature at Intel.com, another common use for ROV in game development is order-independent transparency algorithms.</p> <p>However, this is a hardware feature, and thus on older graphics cards, Ainex is limited to the RT path.</p> <p>Rasterizer-ordered views are used by default in Ainex where available, but if you're experiencing graphical issues, you may try disabling it in the config.</p> <p>The minimum requirements for ROV are:</p> <ul> <li>Nvidia GeForce GTX 950 on desktops, GTX 965M on laptops (Maxwell 2nd generation \u2014 2014)</li> <li>AMD Radeon Vega (GCN 5th generation \u2014 2017)</li> <li>Intel HD Graphics 4200 (2013)</li> </ul> Resolution Scaling <p>This is a hack, and as such, bugs should be expected.</p> Scale XScale Y <p> Horizontal Scale</p> draw_resolution_scale_x # 1x (1280x, default) 1 2x (2560x) 2 3x (3840x) 3 4x (5120x) 4 5x (6400x) 5 6x (7680x) 6 7x (8960x) 7 <p> Vertical Scale:</p> draw_resolution_scale_y # 1x (x720, default) 1 2x (x1440) 2 3x (x2160) 3 4x (x2880) 4 5x (x3600) 5 6x (x4320) 6 7x (x5040) 7 Vertical Sync vsync bool On (default) true Off (uncaps FPS) false <p>This won\u2019t improve the framerate if your PC can\u2019t handle running the game at it\u2019s native FPS.</p> <p>This doesn\u2019t work with all games</p>"},{"location":"faq/options/#general","title":"General","text":""},{"location":"faq/options/#hid","title":"HID","text":"Input Backend <p>This option controls which backend the controller is mapped to.</p> hid string Any input method (default) any SDL2* sdl XInput xinput Keyboard winkey <ul> <li>SDL supports many controllers and many advanced features (not all of them are implemented).   SDL supports an ever-growing list of controllers.</li> <li>XInput supports all Xbox controllers starting with the Xbox 360,   including the Guitar Hero and Rock Band instruments.   Wireless Xbox 360 controllers and some Wireless Xbox One controllers require you to own a USB wireless adapter.</li> <li>WinKey only supports keyboards that are compatible with your device.</li> </ul> <p>When using SDL</p> <p>If your game controller is not mapped correctly, download gamecontrollerdb.txt and place it in the folder next to your Xenia executable.</p>"},{"location":"faq/options/#hid-winkey","title":"HID WinKey","text":"Windows Key Bindings <p> The following settings all follow the same rules.</p> <p>The value must be a key identifier, or multiple key identifiers separated by spaces. Modifiers may be added in front of key identifiers to change the meaning of a bind while another key is pressed.</p>"},{"location":"faq/options/#key-identifiers","title":"Key identifiers","text":"<ul> <li>Virtual-Key Codes (hex)</li> <li>A character corresponding to a key</li> </ul>"},{"location":"faq/options/#key-modifiers","title":"Key modifiers","text":"Modifier Meaning <code>_</code> only with Caps Lock enabled <code>^</code> only while Shift is pressed"},{"location":"faq/options/#examples","title":"Examples","text":"Setting and Value Meaning <code>keybind_a = \"0xBA\"</code> Bind   to ; <code>keybind_x = \"X\"</code> Bind   to X <code>keybind_y = \"Y U 0xA0\"</code> Bind   to Y, U or Left Shift <code>keybind_b = \"_0xBA\"</code> Bind   to ; only when Caps Lock is enabled <code>keybind_dpad_up = \"^X\"</code> Bind   to Shift+X"},{"location":"faq/options/#default-bindings","title":"Default bindings","text":"Setting Name Default Value Meaning keybind_a 0xBA Bind   to ; keybind_b 0xDE Bind   to \" keybind_back Z Bind   to Z keybind_dpad_down ^S Bind   to S (Caps Lock on) keybind_dpad_left ^A Bind   to A (Caps Lock on) keybind_dpad_right ^D Bind   to D (Caps Lock on) keybind_dpad_up ^W Bind   to W (Caps Lock on) keybind_left_shoulder 1 Bind   to 1 keybind_left_thumb F Bind   to F keybind_left_thumb_down _S Bind   to Shift+S keybind_left_thumb_left _A Bind   to Shift+A keybind_left_thumb_right _D Bind   to Shift+D keybind_left_thumb_up _W Bind   to Shift+W keybind_left_trigger Q I Bind   to Q or I keybind_right_shoulder 3 Bind   to 3 keybind_right_thumb K Bind   to K keybind_right_thumb_down 0x28 Bind   to Up keybind_right_thumb_left 0x25 Bind   to Left keybind_right_thumb_right 0x27 Bind   to Right keybind_right_thumb_up 0x26 Bind   to Up keybind_right_trigger E O Bind   to E or O keybind_start X Bind   to X keybind_x L Bind   to L keybind_y P Bind   to P"},{"location":"faq/options/#kernel","title":"Kernel","text":""},{"location":"faq/options/#logging","title":"Logging","text":""},{"location":"faq/options/#memory","title":"Memory","text":"Protect Zero protect_zero bool On (default) true Off (hack, needed for certain games*) false <p>Certain games require this to set be set to false to work around crashes.This includes, but isn't limited to:</p> <ul> <li>Saints Row 1</li> </ul>"},{"location":"faq/options/#sdl","title":"SDL","text":""},{"location":"faq/options/#storage","title":"Storage","text":""},{"location":"faq/options/#ui","title":"UI","text":""},{"location":"faq/options/#vulkan","title":"Vulkan","text":""},{"location":"faq/options/#win32","title":"Win32","text":""},{"location":"faq/options/#xconfig","title":"XConfig","text":"User Language user_language # region code native name English (default) 1 EN English Japanese 2 JA \u65e5\u672c\u8a9e German 3 DE Deutsche French 4 FR Fran\u00e7ais Spanish 5 ES Espa\u00f1ol Italian 6 IT Italiano Korean 7 KO \ud55c\uad6d\uc5b4 Traditional Chinese 8 ZH \u7e41\u9ad4\u4e2d\u6587 Portuguese 9 PT Portugu\u00eas Polish 10 PL Polski Russian 11 RU \u0440\u0443\u0441\u0441\u043a\u0438\u0439 Swedish 12 SV Svenska Turkish 13 TR T\u00fcrk Norwegian 14 NB Norsk Dutch 15 NL Nederlands Simplified Chinese 16 ZH \u7b80\u4f53\u4e2d\u6587"},{"location":"faq/options/#x64","title":"x64","text":""},{"location":"faq/options/apu/","title":"Index","text":"<p>The system used to output audio to the speakers.</p> apu string The first available. (default) any No audio nop SDL2 sdl XAudio2 xaudio2"},{"location":"faq/options/apu/ffmpeg_verbose/","title":"Ffmpeg verbose","text":"<p>Makes FFMPEG output verbose logging.</p> ffmpeg_verbose boolean Disable verbose logging. (default) false Enable verbose logging. true"},{"location":"faq/options/apu/mute/","title":"Mute","text":"<p>Mutes all audio output.</p> mute boolean Audio is enabled. (default) false Audio is disabled. true"},{"location":"faq/options/content/license_mask/","title":"License mask","text":"<p>Set the license mask for activated content.</p> license_mask # No licenses enabled (Demo/Trial mode. default) 0 XBLA activated mode (First license enabled) 1 Full mode (All licenses enabled) -10xFFFFFFFF"},{"location":"faq/options/cpu/","title":"Index","text":"<p>The CPU backend to be used for emulation.</p> cpu string The first available. (default) any x86_64 architecture x64 <p>In all reality, the emulator can only be compiled for one CPU architecture at a time. This option is completely useless.</p>"},{"location":"faq/options/cpu/break_on_unimplemented_instructions/","title":"Break on unimplemented instructions","text":"<p>Break to the host debugger if an unimplemented PowerPC instruction is encountered (or crash if no debugger is attached).</p> break_on_unimplemented_instructions bool On (default) true Off (hack, needed for certain games) false"},{"location":"faq/options/cpu/clock_no_scaling/","title":"Clock no scaling","text":"<p>Disable real-time clock scaling code. Time management and locking is bypassed. Guest system time is directly pulled from the host.</p> clock_no_scaling bool Guest time is scaled proportionally to the running speed. (default) false System time is pulled from directly the host. true"},{"location":"faq/options/cpu/clock_source_raw/","title":"Clock source raw","text":"<p>Use the <code>RDTSC</code> instruction as the time source.</p> <p>Host CPU must support invariant TSC.</p> clock_source_raw bool Gets the guest time using the system clock. (default) false Gets the guest time using the <code>RDTSC</code> instruction. true"},{"location":"faq/options/d3d12/d3d12_adapter/","title":"D3d12 adapter","text":"<p>Index of the DXGI adapter to use. Enter any positive number to use a specific physical adapter.</p> d3d12_adapter # WARP software rendering. -2 Any physical adapter. (default) -1"},{"location":"faq/options/d3d12/d3d12_readback_resolve/","title":"D3d12 readback resolve","text":"<p>This is needed for certain games</p> d3d12_readback_resolve bool Off (default) false On true"},{"location":"faq/options/gpu/draw_resolution_scale_x/","title":"Draw resolution scale x","text":"<p>Horizontal Scale</p> draw_resolution_scale_x # 1x (1280x, default) 1 2x (2560x) 2 3x (3840x) 3 4x (5120x) 4 5x (6400x) 5 6x (7680x) 6 7x (8960x) 7"},{"location":"faq/options/gpu/draw_resolution_scale_y/","title":"Draw resolution scale y","text":"<p>Vertical Scale:</p> draw_resolution_scale_y # 1x (x720, default) 1 2x (x1440) 2 3x (x2160) 3 4x (x2880) 4 5x (x3600) 5 6x (x4320) 6 7x (x5040) 7"},{"location":"faq/options/gpu/gpu/","title":"Gpu","text":"gpu string Any backend (default, recommended) any Direct3D 12 d3d12 Vulkan vulkan Null (blank/nothing) null"},{"location":"faq/options/gpu/gpu_allow_invalid_fetch_constants/","title":"Gpu allow invalid fetch constants","text":"<p>Allow texture and vertex fetch constants with invalid type - generally unsafe because the constant may contain completely invalid values, but may be used to bypass fetch constant type errors in certain games until the real reason why they're invalid is found.</p> gpu_allow_invalid_fetch_constants bool Off (default) false On (hack) true"},{"location":"faq/options/gpu/render_target_path_d3d12/","title":"Render target path d3d12","text":"<p>Leave this option blank for auto-selection.</p> render_target_path_d3d12 string Auto-selection RTV (recommended for speed) rtv ROV (if available, for higher accuracy in certain cases) rov <p>What is ROV (rasterizer-ordered views)?</p> <p>Improves accuracy at the cost of performance. Recommended to be disabled.</p> Long ROV (rasterizer-ordered views) explanation <p>The Direct3D 12 mode in Ainex has two code paths for rendering output (the currently used one is displayed in the window title bar): \"RTV\" (Render Target Views) and \"ROV\" (Rasterizer-Ordered Views).</p> <p>On the Xbox 360, pixels are written to a 10 MB memory chip called the eDRAM, and many games reinterpret the data in it in different formats for various purposes (clearing, HDR rendering, etc.) This is not the case on PC, where different render targets are independent from each other.</p> <p>The \"RT\" path uses conventional PC render targets (RTV \u2014 Render Target Views \u2014 and DSV \u2014 Depth-Stencil Views \u2014 in Direct3D terms) for rendering output, and copies data between PC render target textures and the 10 MB buffer to allow for reinterpretation of eDRAM data in different formats.</p> <p>However, copying has a very heavy performance impact, causing noticeable slowdowns even on modern graphics cards. Another issue is that the Xbox 360 has certain render target formats not available on the PC (7e3 HDR floating-point, 16-bit fixed-point with \u221232\u202632 range, 20^4 floating-point depth) that have to be approximated with other render target formats. This causes unfixable transparency issues (because the blending hardware works with different ranges and precision of numbers) and depth buffer-related issues such as shadow acne.</p> <p>Using the Rasterizer-Ordered Views (ROV) feature of Direct3D 12 allows Ainex to overcome those issues by doing blending and depth/stencil testing manually in pixel shaders, rendering directly to the 10 MB buffer. This allows for much higher performance since there's no expensive data copying, and better accuracy because of no pixel format limitations.</p> <p>\"Rasterizer-ordered\" here means that access to the buffer is synchronized \u2014 if multiple polygons in a single draw call are covering the same pixel, the buffer will be accessed in the correct order, without conflicts that would happen if the data was written through a regular unordered access view (UAV). You can read more about this feature at Intel.com, another common use for ROV in game development is order-independent transparency algorithms.</p> <p>However, this is a hardware feature, and thus on older graphics cards, Ainex is limited to the RT path.</p> <p>Rasterizer-ordered views are used by default in Ainex where available, but if you're experiencing graphical issues, you may try disabling it in the config.</p> <p>The minimum requirements for ROV are:</p> <ul> <li>Nvidia GeForce GTX 950 on desktops, GTX 965M on laptops (Maxwell 2nd generation \u2014 2014)</li> <li>AMD Radeon Vega (GCN 5th generation \u2014 2017)</li> <li>Intel HD Graphics 4200 (2013)</li> </ul>"},{"location":"faq/options/gpu/vsync/","title":"Vsync","text":"vsync bool On (default) true Off (uncaps FPS) false <p>This won\u2019t improve the framerate if your PC can\u2019t handle running the game at it\u2019s native FPS.</p> <p>This doesn\u2019t work with all games</p>"},{"location":"faq/options/hid/hid/","title":"Hid","text":"<p>This option controls which backend the controller is mapped to.</p> hid string Any input method (default) any SDL2* sdl XInput xinput Keyboard winkey <ul> <li>SDL supports many controllers and many advanced features (not all of them are implemented).   SDL supports an ever-growing list of controllers.</li> <li>XInput supports all Xbox controllers starting with the Xbox 360,   including the Guitar Hero and Rock Band instruments.   Wireless Xbox 360 controllers and some Wireless Xbox One controllers require you to own a USB wireless adapter.</li> <li>WinKey only supports keyboards that are compatible with your device.</li> </ul> <p>When using SDL</p> <p>If your game controller is not mapped correctly, download gamecontrollerdb.txt and place it in the folder next to your Xenia executable.</p>"},{"location":"faq/options/hid/winkey/winkey/","title":"Winkey","text":"<p>The following settings all follow the same rules.</p> <p>The value must be a key identifier, or multiple key identifiers separated by spaces. Modifiers may be added in front of key identifiers to change the meaning of a bind while another key is pressed.</p>"},{"location":"faq/options/hid/winkey/winkey/#key-identifiers","title":"Key identifiers","text":"<ul> <li>Virtual-Key Codes (hex)</li> <li>A character corresponding to a key</li> </ul>"},{"location":"faq/options/hid/winkey/winkey/#key-modifiers","title":"Key modifiers","text":"Modifier Meaning <code>_</code> only with Caps Lock enabled <code>^</code> only while Shift is pressed"},{"location":"faq/options/hid/winkey/winkey/#examples","title":"Examples","text":"Setting and Value Meaning <code>keybind_a = \"0xBA\"</code> Bind   to ; <code>keybind_x = \"X\"</code> Bind   to X <code>keybind_y = \"Y U 0xA0\"</code> Bind   to Y, U or Left Shift <code>keybind_b = \"_0xBA\"</code> Bind   to ; only when Caps Lock is enabled <code>keybind_dpad_up = \"^X\"</code> Bind   to Shift+X"},{"location":"faq/options/hid/winkey/winkey/#default-bindings","title":"Default bindings","text":"Setting Name Default Value Meaning keybind_a 0xBA Bind   to ; keybind_b 0xDE Bind   to \" keybind_back Z Bind   to Z keybind_dpad_down ^S Bind   to S (Caps Lock on) keybind_dpad_left ^A Bind   to A (Caps Lock on) keybind_dpad_right ^D Bind   to D (Caps Lock on) keybind_dpad_up ^W Bind   to W (Caps Lock on) keybind_left_shoulder 1 Bind   to 1 keybind_left_thumb F Bind   to F keybind_left_thumb_down _S Bind   to Shift+S keybind_left_thumb_left _A Bind   to Shift+A keybind_left_thumb_right _D Bind   to Shift+D keybind_left_thumb_up _W Bind   to Shift+W keybind_left_trigger Q I Bind   to Q or I keybind_right_shoulder 3 Bind   to 3 keybind_right_thumb K Bind   to K keybind_right_thumb_down 0x28 Bind   to Up keybind_right_thumb_left 0x25 Bind   to Left keybind_right_thumb_right 0x27 Bind   to Right keybind_right_thumb_up 0x26 Bind   to Up keybind_right_trigger E O Bind   to E or O keybind_start X Bind   to X keybind_x L Bind   to L keybind_y P Bind   to P"},{"location":"faq/options/memory/protect_zero/","title":"Protect zero","text":"protect_zero bool On (default) true Off (hack, needed for certain games*) false <p>Certain games require this to set be set to false to work around crashes.This includes, but isn't limited to:</p> <ul> <li>Saints Row 1</li> </ul>"},{"location":"faq/options/xconfig/user_language/","title":"User language","text":"user_language # region code native name English (default) 1 EN English Japanese 2 JA \u65e5\u672c\u8a9e German 3 DE Deutsche French 4 FR Fran\u00e7ais Spanish 5 ES Espa\u00f1ol Italian 6 IT Italiano Korean 7 KO \ud55c\uad6d\uc5b4 Traditional Chinese 8 ZH \u7e41\u9ad4\u4e2d\u6587 Portuguese 9 PT Portugu\u00eas Polish 10 PL Polski Russian 11 RU \u0440\u0443\u0441\u0441\u043a\u0438\u0439 Swedish 12 SV Svenska Turkish 13 TR T\u00fcrk Norwegian 14 NB Norsk Dutch 15 NL Nederlands Simplified Chinese 16 ZH \u7b80\u4f53\u4e2d\u6587"},{"location":"faq/quickstart/","title":"Quickstart Guide","text":"<p> Welcome to the Ainex Xbox 360 Emulator.</p> <p>The following sections will explain the minimum requirements and recommended hardware for Ainex, how to install it, and how to dump games for use in Ainex.</p> <p>See also:</p> <ul> <li>Already know how to use Ainex? Want to help out? Check out the Ainex contribution guide.</li> <li>Want to contribute to the wiki? Check out the wiki contribution guide.</li> </ul> <p>Next section....</p> <ul> <li>System Requirements</li> </ul>"},{"location":"faq/quickstart/activate_games/","title":"Activating Games and DLC","text":"<p>By default Ainex runs ALL XBLA/digital games in demo/trial mode.</p> <p>To run games in full/activated mode you need to change this option.</p>"},{"location":"faq/quickstart/download/","title":"Where to Download","text":""},{"location":"faq/quickstart/download/#where-do-i-download-ainex","title":"Where do I download Ainex?","text":"<ul> <li> Xenia Emulator Logo image/svg+xml Xenia Emulator Logo 28-05-2019 SVG Remake of Xenia Logo by Kwasior/@ThisKwasior Master</li> </ul> <p>Ainex is sometimes detected as a virus. Ignore this, as it is a false positive</p> <p>Next section...</p> <ul> <li>How to Dump Games</li> </ul>"},{"location":"faq/quickstart/dumping/","title":"How to Rip / Dump Games","text":"<p>YOU CANNOT PLAY GAMES DIRECTLY FROM THE DISC DRIVE, OR USE AN XBOX ONE/SERIES TO RIP GAMES!</p>"},{"location":"faq/quickstart/dumping/#stock-console-method","title":"Stock console method","text":""},{"location":"faq/quickstart/dumping/#requirements","title":"Requirements","text":"<ul> <li>Xbox 360 console</li> <li>USB storage device that's at least 16GB. You might encounter problems with smaller devices.</li> <li>Velocity</li> </ul> <p>If you want to rip games from disc:</p> <ul> <li>Xbox 360 game disc</li> <li>Xbox 360 console with a working disc drive</li> </ul>"},{"location":"faq/quickstart/dumping/#0-preparation","title":"0. Preparation","text":"<p>Before beginning, you need to check if the USB is formatted:</p> BladesNXEMetro <ol> <li>Go to System.</li> <li>Select Memory.</li> <li> <p>Select a device</p> If you see an unformatted storage device... <ol> <li>Press   to format</li> <li>Select Yes</li> </ol> <p>This will erase everything from the drive. Make sure to move the files off of it first!</p> </li> </ol> <p>Once done, return to home by pressing   twice.</p> <ol> <li>Go to My Xbox &gt; System Settings. </li> <li>Select Memory. </li> <li> <p>Select a device</p> If you see an unformatted storage device... <ol> <li>Press   to format</li> <li>Select Yes</li> </ol> <p>This will erase everything from the drive. Make sure to move the files off of it first!</p> </li> </ol> <p>Once done, return to home by pressing   twice.</p> <ol> <li>Go to Settings &gt; System. </li> <li>Select Storage. </li> <li> <p>Select a device     </p> If you see an unformatted storage device... <ol> <li>Press   to format </li> <li>Select Yes </li> </ol> <p>This will erase everything from the drive. Make sure to move the files off of it first!</p> </li> </ol> <p>Once done, return to home by pressing   twice.</p>"},{"location":"faq/quickstart/dumping/#1-ripping-discs","title":"1. Ripping discs","text":"<p>If your game isn't a disc (XBLA, digital, etc.) skip this section.</p> Metro <ol> <li>Go to Settings &gt; System. </li> <li>Select Storage. </li> </ol> <p>You'll want to change these options to stop game(s) from automatically starting:</p> <p>Settings &gt; System &gt; Console Settings &gt; Auto-Play &gt; Disable</p> Settings &gt; System: <p></p> Console Settings: <p></p> Auto-Play: <p></p> Disable: <p></p> <p>Settings &gt; System &gt; Console Settings &gt; Startup and Shutdown &gt; Startup &gt; Xbox Dashboard</p> Settings &gt; System: <p></p> Console Settings: <p></p> Startup and Shutdown: <p></p> Startup: <p></p> Xbox Dashboard: <p></p> <ol> <li>Go to home on the dashboard</li> <li>Insert the disc into the drive, and close the tray.</li> <li>Once the game shows up press   (Game Details) with the game selected.</li> <li>Press the Install button.<ul> <li>If you see Delete instead, skip to Section 2.</li> <li>Note: Not all games have the Install option. List of currently known uninstallable games:<ul> <li>College Hoops 2k7</li> <li>Minecraft</li> <li>Pocket Bike Racers</li> <li>Sneak King</li> <li>Dead or Alive Xtreme 2</li> </ul> </li> </ul> </li> <li>Select the storage device you want to install the game on.</li> <li>Once it's 100% Completed press   to continue, and press   to go back to home.</li> </ol>"},{"location":"faq/quickstart/dumping/#2-transferring-hdd-games","title":"2. Transferring HDD games","text":"<p>If you ripped the game(s) directly to the USB drive, or they're already on the USB drive, you can skip this section.</p> How to transfer games from the HDD or internal storage Metro <ol> <li>Go to Settings &gt; System. </li> <li>Select Storage. </li> <li>Select your hard drive or internal storage and Press  . (Device Options).     </li> <li>Select Transfer Content. </li> <li>Select your USB storage device. </li> <li>Make sure the games your want to move are selected. </li> <li>Press right, then select Start.      When it's done you can take the USB drive out of the console.</li> </ol>"},{"location":"faq/quickstart/dumping/#3-importing-games-for-use-in-ainex","title":"3. Importing games for use in Ainex","text":"<ol> <li>Insert the USB drive into your PC. Go to <code>Content</code>.<ul> <li>If the USB drive appears empty enable Show hidden files and folders in Windows Explorer.</li> </ul> </li> <li>Go into <code>00000#</code>. There will be folders with names consisting of lots of letters and numbers. You should find the game's folder within one of them.</li> <li>The game will have a name with a bunch of letters and numbers just like the folders, and no file extension.<ul> <li>XBLA games will be one file, GOD (disc) games will contain a file, along with a <code>*.data</code> folder with the same name.</li> <li><code>ContentCache.pkg</code> is irrelevant. Ignore it.</li> </ul> </li> <li>To confirm that it is indeed a game try opening the file in Ainex.</li> <li>Once you've made sure the file works in Ainex you can rename, or move the folder the game is in for convenience.<ul> <li>FOLDER ABOVE, NOT FILE or *<code>.DATA</code> FOLDER!</li> <li>(Optional) If the game crashes you can try extracting the game using Velocity.</li> <li>If the game is extracted you will need to drag <code>default.xex</code> onto Ainex.</li> <li>Some games have multiple .xex files, so if you can't find <code>default.xex</code> or it just doesn't work, try another one.</li> </ul> </li> </ol>"},{"location":"faq/quickstart/dumping/#rgh-jtag-method","title":"RGH / JTAG method","text":"<p>Modded consoles can use custom dashboards or other homebrew apps to copy game files from discs to removable storage devices.</p>"},{"location":"faq/quickstart/dumping/#1-copy-files","title":"1. Copy Files","text":"<p>Use Aurora or Freestyle Dash to copy your game data from the disc to the USB drive.</p> <p>When it's done, you can take the USB drive out of the console.</p>"},{"location":"faq/quickstart/dumping/#2-importing-games-for-use-in-ainex","title":"2. Importing games for use in Ainex","text":"<ol> <li>Insert the USB drive into your PC. Go to <code>Content</code>.<ul> <li>If the USB drive appears empty enable Show hidden files and folders in Windows Explorer.</li> </ul> </li> <li>Go into <code>00000#</code>. There will be folders with names consisting of lots of letters and numbers. You should find the game's folder within one of them.</li> <li>The game will have a name with a bunch of letters and numbers just like the folders, and no file extension.<ul> <li>XBLA games will be one file, GOD (disc) games will contain a file, along with a *.data folder with the same name.</li> <li>ContentCache.pkg is irrelevant. Ignore it.</li> </ul> </li> <li>To confirm that it is indeed a game try opening the file in Ainex.</li> <li>Once you've made sure the file works in Ainex you can rename, or move the folder the game is in for convenience.<ul> <li>FOLDER ABOVE, NOT FILE or *.DATA FOLDER!</li> <li>(Optional) If the game crashes you can try extracting the game using Velocity.</li> <li>If the game is extracted you will need to drag <code>default.xex</code> onto Ainex.</li> <li>Some games have multiple .xex files, so if you can't find <code>default.xex</code> or it just doesn't work, try another one.</li> </ul> </li> </ol>"},{"location":"faq/quickstart/dumping/#redump-method","title":"Redump Method","text":"<p>Not recommended for most users.</p> <p>If you happen to own one of these specific PC DVD drives, you may use the Redump method to dump full game ISO files for archival purposes.</p> <ul> <li>SH-D163A / TS-H353A</li> <li>SH-D163B / TS-H353B</li> <li>SH-162C / TS-H352C / SD-M2012C(?)</li> <li>SH-D162D / TS-H352D</li> </ul> <p>0800-series optical drives from the Xbox 360 can be flashed to dump XGD3 copy-protected discs from a PC.</p> <ul> <li>Phillips VAD6038 aka BenQ VAD6038</li> <li>Liteon DG-16D2S</li> <li>Samsung TS-H943</li> </ul> <p>See Redump.org for more information.</p>"},{"location":"faq/quickstart/dumping/#continue","title":"Continue","text":"<p>See also</p> <p>Redump Xbox and Xbox 360 dumping guide</p> <p>Next section...</p> <ul> <li>Installing DLCs</li> <li>Activating Licenses (DLCs and Trials)</li> </ul>"},{"location":"faq/quickstart/install_dlc/","title":"How to install DLCs","text":""},{"location":"faq/quickstart/install_dlc/#0-requirements","title":"0. Requirements","text":"<ul> <li>Read Dumping games</li> <li>Download Velocity from here.</li> </ul>"},{"location":"faq/quickstart/install_dlc/#1-extracting","title":"1. Extracting","text":"<ol> <li> <p>Identify what the Game Title ID is. This can be identified by running the game in Ainex. </p> </li> <li> <p>Locate your DLC Content folder from your removable storage. </p> </li> <li> <p>Open the Packages with Velocity. </p> </li> <li> <p>Extract the content packages to <code>Documents\\Xenia\\&lt;TitleID&gt;\\00000002\\&lt;PackageHash&gt;</code>. </p> </li> </ol>"},{"location":"faq/quickstart/install_dlc/#continue","title":"Continue","text":"<p>Next section...</p> <p>Activating Games and DLCs</p>"},{"location":"faq/quickstart/system_requirements/","title":"System Requirements","text":"<p>Meeting recommended specifications won't guarantee perfect performance.</p> How to find relevant specs in Speccy on Windows <p>On the first page, you'll find your operating system, CPU, GPU, and amount of RAM.  On the CPU page, you'll find your CPU instruction extensions. (Look for <code>AVX2</code>) </p>"},{"location":"faq/quickstart/system_requirements/#recommended","title":"Recommended:","text":"<ul> <li>OS: Windows 10+ x64</li> <li>CPU: 4th generation or later i5/i7 64-bit x86 processor with AVX(2) support</li> <li>GPU: GTX 980 Ti or later</li> <li>RAM: 6GB or more</li> <li>Microsoft Visual C++ Redistributable</li> </ul>"},{"location":"faq/quickstart/system_requirements/#minimum","title":"Minimum:","text":"<ul> <li>OS: Windows 7+ x64 (Linux/macOS not natively supported)</li> <li>Windows &lt;10 support is limited. Don't expect anything to work.</li> <li>Runs on Linux with Wine using Vulkan.</li> <li>CPU: 64-bit x86 processor with AVX(2) support</li> <li>GPU: Direct3D 12-compatible or Vulkan-compatible GPU from this list</li> <li>Direct3D 12 will only work on Windows 10 due to D3D12on7 and vkd3d not being supported.</li> <li>GPUs without ROV (rasterizer-ordered view) / fragment shader interlock support will perform worse and possibly have more graphical issues. Integrated GPUs will also generally provide frame rates too low for comfortable playing.<ul> <li>AMD GPUs also fall under this due to Ainex triggering driver bugs causing crashes.</li> </ul> </li> <li>RAM: 4GB</li> <li>The Latest x64 Visual C++ Redistributable</li> </ul> <p>Ainex doesn't require any Xbox 360 system files.</p> <p>Ainex will check for the minimum supported CPU and GPU on startup and error out if one is not detected. Make sure that you have the latest drivers installed. You cannot just remove the checks in the code and assume things will work.</p> <p>There are no magical workarounds to make Ainex work on your potato computer.</p> <p>OpenGL and Direct3D11 or lower are not, and never will be supported.</p> <p>Windows Update tends to lag behind, so download GPU drivers from your manufacturer:     - AMD     - NVIDIA     - Intel</p> <p>Next section...</p> <ul> <li>Where to Download Ainex</li> </ul>"},{"location":"meta/","title":"About Ainex Wiki","text":"<p>The Ainex Wiki is the official source of documentation for the Ainex project.</p> <p>Articles written here are contributed by members of the Ainex community, including the developers of Ainex themselves!</p> <p>If you would like to contribute to the project, you've come to the right place. Just click the link down below to learn how!</p> <p>Want to contribute to the wiki?</p> <p>See the contribution guide</p>"},{"location":"meta/#contributors","title":"Contributors \u2728","text":"<p>The Ainex Wiki is brought to you by these contributors (emoji key):</p> <sub>Caroline Joy Bell</sub>\ud83d\udcd6 \ud83d\udd8b \ud83c\udfa8 \ud83d\udcbb <sub>Margen67</sub>\ud83d\udcd6 \ud83d\udd8b \ud83d\udcbb <sub>Billie</sub>\u26a0\ufe0f <sub>Satori</sub>\ud83d\udcbb <p>This project follows the all-contributors specification. Contributions of any kind welcome!</p>"},{"location":"meta/contributing/","title":"Ainex Wiki Contribution Guide","text":"Prerequisites Instructions Testing"},{"location":"meta/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Knowledge and a copy of Git</li> <li>A GitHub account</li> </ul>"},{"location":"meta/contributing/#for-testing","title":"For testing","text":"<p>You'll need MkDocs installed locally via Python to test your changes.</p> <ol> <li>Python 3.7+</li> <li> <p>Ensure Python gets added to your PATH</p> </li> <li> <p>MkDocs, and mkdocs-material:</p> </li> <li>Run <code>python -m pip install mkdocs mkdocs-material</code> in your command prompt</li> </ol>"},{"location":"meta/contributing/#instructions","title":"Instructions","text":"<p>If this is your first time contributing, be sure to read this entire section before you begin.</p> <ol> <li> <p>Clone the repo and open it in your favorite editor.</p> </li> <li> <p>If your editor creates editor-specific files, add them to the <code>.gitignore</code> file.</p> </li> <li> <p>Write your article using Markdown. The many features of Markdown extensions can be found in the links below.    If you'd like to use a Markdown extension not listed in mkdocs.yml,    you may add them to the list. You should ensure compatibility with other articles (so their layout does not    accidentally change) before your changes are merged.</p> <ul> <li>PyMdown Extensions</li> <li>MkDocs Material Extensions</li> </ul> </li> <li> <p>Test and spell-check your article before it is merged.</p> </li> <li> <p>Submit a pull request to the wiki repo</p> </li> </ol>"},{"location":"meta/contributing/#testing","title":"Testing","text":"<p>To serve your copy of the website for testing:</p> <ol> <li> <p>Run <code>python -m mkdocs serve</code> in your command prompt</p> </li> <li> <p>Open <code>127.0.0.1:8000</code> in your browser    (be sure not to include <code>http(s)://</code> this will cause errors in the browser)</p> </li> <li> <p>If you get any errors, read them carefully. The most common errors are broken links. You may have typed them wrong.</p> </li> <li>Keep in mind that <code>/</code> resolves to the <code>docs</code> folder. So, this page for example would be located at <code>/meta/contributing</code></li> <li>Embedded images must have extensions.      Links to documents on this Wiki must have extensions.      Articles on the wiki are do not need <code>.md</code> extensions (except in <code>mkdocs.yml</code>).</li> </ol>"},{"location":"meta/contributing/#guidelines","title":"Guidelines","text":"<ol> <li>Never attach files or links to content that is private to another party.    This includes leaked documentation (such as the XDK), piracy websites and other pirated content.</li> <li>If you attach a link to code on GitHub in your article, make sure to get the permalink.    Attaching links to branches (such as master/main) leads to dead or incorrect links down the road!</li> </ol>"},{"location":"meta/contributing/#tips","title":"Tips","text":"<p>Stumped on how to do something? These resources might help!</p> <ul> <li>MkDocs Material Setup   Explains the setup of MkDocs Material sites, such as fonts, colors, and navigation.</li> <li>MkDocs Material Reference   Includes details about the features of MkDocs Material, the theme used by Ainex Wiki.   Want to know how to use features like emoji, tables, buttons, and diagrams? It's all in there.</li> </ul>"},{"location":"meta/contributing/#tools","title":"Tools","text":"<ul> <li>Ainex - You'll probably need it!</li> <li>Lightshot - An easy screenshot program for Windows and Mac   Has a few more features than Snipping Tool, including automatic upload and a dedicated screenshot hotkey.<ul> <li>In Windows 10 version 1803, build 17661 and higher, there is now a built-in shortcut feature that works like Lightshot.To use it, just press Win+Shift+S.</li> </ul> </li> <li>Spectacle - A good alternative to Lightshot, on Linux.     Included in some KDE distributions. By default, the shortcut is simply Print Screen.</li> </ul>"},{"location":"meta/contributing/#suggestions","title":"Suggestions","text":"<p>Config Options are often added updated, and could always use documentation.</p> <p>Additional languages can be supported. Although Ainex itself does not yet support multiple languages, the wiki can! If you would like to translate the wiki to your language, start here!</p>"}]}